name: Build and deploy after PR merged

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'corretto'

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build and test
        run: ./gradlew build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Test coverage verification
        run: ./gradlew jacocoTestCoverageVerification

      - name: Integration test
        run: ./gradlew integrationTest --tests '*IntegrationTest'

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: claim-for-payment-service/build/test-results
          retention-days: 14

      - name: Upload checkstyle report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: checkstyle-report
          path: claim-for-payment-service/build/reports/checkstyle
          retention-days: 14

      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: claim-for-payment-service/build/reports/tests
          retention-days: 14

      - name: Upload jacoco coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-coverage-report
          path: claim-for-payment-service/build/reports/jacoco
          retention-days: 14

  ecr:
    needs: build-test
    runs-on: ubuntu-latest
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read # This is required for actions/checkout
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build and test
        run: ./gradlew build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a #v4.3.1
        with:
          role-to-assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.ECR_REGION }}
      - name: login to registry
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
        id: login-ecr
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435
        with:
          install: true

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push image with local action
        uses: ./.github/actions/build_and_push
        with:
          image_registry: ${{ secrets.ECR_REGISTRY_URL }}
          image_repo: ${{ vars.ECR_REPOSITORY }}
          dockerfile_path: Dockerfile
          image_tag: ${{ github.sha }}

  deploy-uat:
        environment: uat
        runs-on: ubuntu-latest
        needs:
          - build-test
          - ecr
          - vulnerability-report

        steps:
          - name: Checkout
            uses: actions/checkout@v4

          - name: Deploy to UAT
            uses: ./.github/actions/deploy
            with:
              ecr-repository: ${{ vars.ECR_REPOSITORY }}
              ecr-registry_url: ${{ secrets.ECR_REGISTRY_URL }}
              kube-cert: ${{ secrets.KUBE_CERT }}
              kube-token: ${{ secrets.KUBE_TOKEN }}
              kube-cluster: ${{ secrets.KUBE_CLUSTER }}
              kube-namespace: ${{ secrets.KUBE_NAMESPACE }}
              app-environment: uat
              session_secret: ${{ secrets.SESSION_SECRET }}
              service_name: ${{ vars.SERVICE_NAME }}
              service_phase: ${{ vars.SERVICE_PHASE }}
              department_name: ${{ vars.DEPARTMENT_NAME }}
              department_url: ${{ vars.DEPARTMENT_URL }}
              contact_email: ${{ vars.CONTACT_EMAIL }}
              service_url: ${{ vars.SERVICE_URL }}
              session_name: ${{ vars.SESSION_NAME}}
              ratelimit_headers_enabled: ${{ vars.RATELIMIT_HEADERS_ENABLED }}
              ratelimit_storage_uri: ${{ vars.RATELIMIT_STORAGE_URI }}
              ratelimit_max: ${{ vars.RATE_LIMIT_MAX }}
              ratewindow_ms: ${{ vars.RATE_WINDOW_MS }}

  deploy-staging:
        environment: staging
        runs-on: ubuntu-latest
        needs:
          - deploy-uat
        steps:
          - name: Checkout
            uses: actions/checkout@v4

          - name: Deploy to Staging
            uses: ./.github/actions/deploy
            with:
              ecr-repository: ${{ vars.ECR_REPOSITORY }}
              ecr-registry_url: ${{ secrets.ECR_REGISTRY_URL }}
              kube-cert: ${{ secrets.KUBE_CERT }}
              kube-token: ${{ secrets.KUBE_TOKEN }}
              kube-cluster: ${{ secrets.KUBE_CLUSTER }}
              kube-namespace: ${{ secrets.KUBE_NAMESPACE }}
              app-environment: staging
              session_secret: ${{ secrets.SESSION_SECRET }}
              service_name: ${{ vars.SERVICE_NAME }}
              service_phase: ${{ vars.SERVICE_PHASE }}
              department_name: ${{ vars.DEPARTMENT_NAME }}
              department_url: ${{ vars.DEPARTMENT_URL }}
              contact_email: ${{ vars.CONTACT_EMAIL }}
              service_url: ${{ vars.SERVICE_URL }}
              session_name: ${{ vars.SESSION_NAME}}
              ratelimit_headers_enabled: ${{ vars.RATELIMIT_HEADERS_ENABLED }}
              ratelimit_storage_uri: ${{ vars.RATELIMIT_STORAGE_URI }}
              ratelimit_max: ${{ vars.RATE_LIMIT_MAX }}
              ratewindow_ms: ${{ vars.RATE_WINDOW_MS }}

  vulnerability-report:
    runs-on: ubuntu-latest

    permissions:
      security-events: write

    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      SNYK_ORG: legal-aid-agency
      SNYK_TEST_EXCLUDE: build,generated
      SNYK_TARGET_REFERENCE: main
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - name: Run Snyk to check app for vulnerabilities
        uses: snyk/actions/gradle@master
        continue-on-error: true # To make sure that SARIF upload gets called
        with:
          command: monitor
          args: --org=$SNYK_ORG --all-projects --exclude=$SNYK_TEST_EXCLUDE --target-reference=$SNYK_TARGET_REFERENCE

      - name: Generate sarif Snyk report
        uses: snyk/actions/gradle@master
        continue-on-error: true
        with:
          args: --org=$SNYK_ORG --all-projects --exclude=$SNYK_TEST_EXCLUDE --target-reference=$SNYK_TARGET_REFERENCE --sarif-file-output=snyk-app.sarif

      # Fix/hack for Snyk's sarif file to avoid this error uploading to GitHub.
      # See https://github.com/github/codeql-action/issues/2187 for more context.
      - name: Fix undefined values
        run: |
          sed -i 's/"security-severity": "undefined"/"security-severity": "0"/g' snyk-app.sarif

      - name: Upload result to GitHub Code Scanning
        continue-on-error: true # need to account for snyk test producing multiple runs in sarif
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-app.sarif

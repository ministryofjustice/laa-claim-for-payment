/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package uk.gov.justice.laa.claimforpayment.civilclaims.api;

import uk.gov.justice.laa.claimforpayment.civilclaims.model.Claim;
import uk.gov.justice.laa.claimforpayment.civilclaims.model.ClaimRequestBody;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-07-09T14:59:13.025823+01:00[Europe/London]", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "claims", description = "the claims API")
public interface ClaimsApi {

    /**
     * POST /api/v1/claims : Create an claim
     *
     * @param claimRequestBody  (required)
     * @return Created (status code 201)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "createClaim",
        summary = "Create an claim",
        tags = { "claims" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created"),
            @ApiResponse(responseCode = "400", description = "Bad request"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not found"),
            @ApiResponse(responseCode = "500", description = "Internal server error")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/claims",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> createClaim(
        @Parameter(name = "ClaimRequestBody", description = "", required = true) @Valid @RequestBody ClaimRequestBody claimRequestBody
    );


    /**
     * DELETE /api/v1/claims/{id} : Delete claim by id
     *
     * @param id The id of the claim to be deleted (required)
     * @return No content (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "deleteClaim",
        summary = "Delete claim by id",
        tags = { "claims" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No content"),
            @ApiResponse(responseCode = "400", description = "Bad request"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not found"),
            @ApiResponse(responseCode = "500", description = "Internal server error")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/claims/{id}"
    )
    
    ResponseEntity<Void> deleteClaim(
        @Parameter(name = "id", description = "The id of the claim to be deleted", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * GET /api/v1/claims/{id} : Get claim by id
     *
     * @param id The id of the claim to retrieve (required)
     * @return Success (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getClaimById",
        summary = "Get claim by id",
        tags = { "claims" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Claim.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Claim.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Claim.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Claim.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Claim.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Claim.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/claims/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Claim> getClaimById(
        @Parameter(name = "id", description = "The id of the claim to retrieve", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * GET /api/v1/claims : Get claims
     *
     * @return Success (status code 200)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getClaims",
        summary = "Get claims",
        tags = { "claims" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Claim.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Claim.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Claim.class)))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Claim.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Not found", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Claim.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Claim.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/claims",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Claim>> getClaims(
        
    );


    /**
     * PUT /api/v1/claims/{id} : Update an claim
     *
     * @param id The id of the claim to be updated (required)
     * @param claimRequestBody  (optional)
     * @return No content (status code 204)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "updateClaim",
        summary = "Update an claim",
        tags = { "claims" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No content"),
            @ApiResponse(responseCode = "400", description = "Bad request"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not found"),
            @ApiResponse(responseCode = "500", description = "Internal server error")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/claims/{id}",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> updateClaim(
        @Parameter(name = "id", description = "The id of the claim to be updated", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "ClaimRequestBody", description = "") @Valid @RequestBody(required = false) @Nullable ClaimRequestBody claimRequestBody
    );

}

plugins {
    id 'io.freefair.lombok' version '8.14'
    id 'uk.gov.laa.ccms.springboot.laa-ccms-spring-boot-gradle-plugin'
    id 'org.openapi.generator' version '7.14.0'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    testLogging {
        //events "passed", "skipped", "failed", "standard_out", "standard_error"
        //showStandardStreams = true
    }
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/ClaimForPaymentApplication.class',
                '**/uk/gov/justice/laa/claimforpayment/civilclaims/**'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/ClaimForPaymentApplication.class',
                '**/uk/gov/justice/laa/claimforpayment/civilclaims/**'
            ])
        }))
    }
}


tasks.register('generateCivilClaimsApi', org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {

    generatorName = "java"
    library = "webclient"
    remoteInputSpec = "https://laa-data-stewardship-payments-dev.apps.live.cloud-platform.service.justice.gov.uk/v3/api-docs"
    outputDir = "$rootDir/claim-for-payment-service/generated".toString()
    apiPackage = "uk.gov.justice.laa.claimforpayment.civilclaims.api"
    modelPackage = "uk.gov.justice.laa.claimforpayment.civilclaims.model"
    invokerPackage = "uk.gov.justice.laa.claimforpayment.civilclaims.invoker"
    configOptions = [
        dateLibrary: "java11",
        library: "webclient",
        useRuntimeException: "true",
        useBeanValidation: "true",
        useJakartaEe: "true"
    ]

    // Make the task up-to-date-aware
    outputs.dir(outputDir)
    onlyIf { project.hasProperty("generateCivilClaims") }

}

// Enforce ordering if clean runs
tasks.named('generateCivilClaimsApi') {
    mustRunAfter tasks.named('clean')
}

sourceSets {
  main {
    java {
      srcDirs = ['src/main/java', 'generated/src/main/java']
    }
  }
}

clean {
    doFirst {
        def genDir = file("$rootDir/claim-for-payment-service/generated")
        if (project.hasProperty("generateCivilClaims")) {
            delete genDir
            logger.lifecycle("Deleted generated directory: $genDir")
        } else {
            logger.lifecycle("Skipping deletion of generated directory: $genDir (set -PgenerateCivilClaims to delete)")
        }
    }
}


tasks.named('checkstyleMain') {
  // Only lint your handwritten code:
  source = fileTree('src/main/java')
}

dependencies {
    // implementation project(':claim-for-payment-api')

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.apache.tomcat.embed:tomcat-embed-core:11.0.10' // required for snyk vulerability
    implementation 'org.mapstruct:mapstruct:1.6.3'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    implementation "org.flywaydb:flyway-core"
    implementation "org.flywaydb:flyway-database-postgresql"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.springframework.security:spring-security-test"

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'

    implementation("io.swagger.core.v3:swagger-core-jakarta:2.2.35") {
        exclude group: "org.apache.commons", module: "commons-lang3"
    }
    implementation "org.apache.commons:commons-lang3:3.18.0"

    constraints {
        implementation("org.apache.commons:commons-lang3:3.18.0") {
            because("Fixes Snyk vulnerability in transitive dependency from swagger-core")
        }
    }
}

if (project.hasProperty('generateCivilClaims')) {
    tasks.named('build') {
        dependsOn tasks.named('generateCivilClaimsApi')
    }
     tasks.named('compileJava') {
        dependsOn tasks.named('generateCivilClaimsApi')
    }
}

